<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="penetrationsearch">
	<select id="getList" resultType="hashmap" parameterType="hashmap">
	<![CDATA[
	select * 
	from (
			select 
						Row_Number() OVER (ORDER BY pb.regdate desc) as rowNum,
                        pb.EquipNo,
                        dbo.GetCodeInfoNameByID(pb.EquipNo) EquipNo_name,
                        pb.LocNo,
                        dbo.GetCodeInfoNameByID(pb.LocNo) LocNo_name,
                        pb.ManagementNo,
                        pb.PenetrationNo ,
                        pb.ManagementAreaYN,
                        CONCAT(cast(pb.Elevation_num_pit as decimal(10,0)), '''-',pb.Elevation_num_inc, '"') Elevation,
                        pb.Elevation_num_pit,
                        pb.Elevation_num_inc,
                        pb.FirePreventionAreaNo,
                        pb.InspectionRoomNo,
                        pb.BackRoomNo,
                        pb.PenetrationForm,
			            dbo.GetCodeInfoNameByID(pb.PenetrationForm) PenetrationForm_name,
                        pb.Wall_FloorNo,
                        pb.FirewallYN,
			            dbo.GetCodeInfoNameByID(pb.FirewallYN) FirewallYN_name,
                        pb.WallMeterial,
			            dbo.GetCodeInfoNameByID(pb.WallMeterial) WallMeterial_name,
                        pb.WallThickness,
                        pb.ReferenceFloorPlanNo,
                        pb.LocationFloorPlanNo,
                        pb.SealDetailDWG,
                        pb.EL,
                        pb.Diameter,
                        pb.Height,
                        pb.Length,
                        pb.PenetrationType,
                        pb.MaximumFreeArea,
                        pb.MaximumFreeDistance,
                        pb.SAFETY_CATEGORY,
                        pb.ANCHORTYPE,
                        pb.LATERALMOVEMENT,
                        pb.LINETEMPERATURE,
                        pb.VENTILATION_VALUE,
                        pb.VENTILATION_VALUE_RANGE,
                        pb.VENTILATION_VAL_NO,
                        pb.VENTILATION_JUDGMENT,
                        pb.VENTILATION_REASON,
                        pb.FIRE_VALUE,
                        pb.FIRE_VALUE_RANGE,
                        pb.FIRE_VAL_NO,
                        pb.FIRE_JUDGMENT,
                        pb.FIRE_REASON,
                        pb.RADIATION_VALUE,
                        pb.RADIATION_VALUE_RANGE,
                        pb.RADIATION_VAL_NO,
                        pb.RADIATION_JUDGMENT,
                        pb.RADIATION_REASON,
                        pb.FLOOD_VALUE,
                        pb.FLOOD_VALUE_RANGE,
                        pb.FLOOD_VAL_NO,
                        pb.FLOOD_JUDGMENT,
                        pb.FLOOD_REASON,
                        pb.PRESSURE_VALUE,
                        pb.PRESSURE_VALUE_RANGE,
                        pb.PRESSURE_VAL_NO,
                        pb.PRESSURE_JUDGMENT,
                        pb.PRESSURE_REASON,
                        pb.Register as pb_Register,
                        pb.Register_date,
                        pb.Reviewer as pb_Reviewer,
                        pb.Reviewer_date,
                        pb.Supporter,
                        pb.Supporter_date,
                        pb.Technicker,
                        pb.Technicker_date,
                        pb.Checker as pb_Checker,
                        pb.Checker_date,
                        pb.CertificationYN,
                        pb.Com_name,
                        pb.ManagementObjYN,
                        pb.NewYN,
                        pb.Wall_Fire_time,
                        pb.SpecialNote,

                        p.matter,
			            dbo.GetCodeInfoNameByID(p.matter) matter_name,
						p.Pipe,
						p.Duct,
						p.SectionTube,
						p.Conduit,
						p.Cable,
						p.Tray,
						p.CoverTray,
						p.Etc,
						p.CAP_Not_Num,

                        pi.InspectDate,
                        pi.InspectSeq,
                        pi.ImproveDate,
                        pi.InspectionInterval,
                        pi.SealantConditionState,
                        pi.JudgementReason,
                        pi.Judgment,
			            dbo.GetCodeInfoNameByID(pi.Judgment) Judgment_name,
                        pi.ImproveNote,
						pi.ImproveMember,
						pi.FrontPicNo,
						pi.BackPicNo,
						pi.DesignChangeNo,
						pi.FileLocation_1,
						pi.FileLocation_2,
						pi.FileLocation_3,
    
                        
                        s.ConstructionState,
			            dbo.GetConstractionStateByCodePenetration(pb.PenetrationNo,pb.ManagementNo,'A03') ConstructionState_name,
                        s.SealSealDetailDWG,
                        s.SealQualityClass,
                        dbo.GetSealMaterialByCodePenetration(pb.PenetrationNo,pb.ManagementNo,'A12') SealMeterial_name,
                        s.SealThickness,
                        s.PressingBoardMeterial,
                        s.PressingBoardThickness,
                        s.RepairQuantity,
                        s.Register,
                        s.Reviewer,
                        s.Checker,
                        s.SealantSpecialNote,
                       
                        
                        pb.regdate
		            FROM penetrationbaseinfo pb
		            JOIN penetrationinfo p on p.ManagementNo = pb.ManagementNo and p.PenetrationNo = pb.PenetrationNo
		            JOIN sealantinfo s on s.ManagementNo = pb.ManagementNo and s.PenetrationNo = pb.PenetrationNo 
					LEFT JOIN penetrationinspect pi on pi.ManagementNo = pb.ManagementNo and pi.PenetrationNo = pb.PenetrationNo
		            	 and pi.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pi.PenetrationNo  and pifoo.ManagementNo = pi.ManagementNo)
		            where 1=1 ${cond}	
	
	) as foo where foo.rowNum > ${low} and foo.rowNum <= ${high}
	ORDER BY foo.RegDate desc
	]]>
	</select>
	
	<select id="getListCount" resultType="Integer" parameterType="hashmap">
			select count(*)
		    FROM penetrationbaseinfo pb
		    JOIN penetrationinfo p on p.ManagementNo = pb.ManagementNo and p.PenetrationNo = pb.PenetrationNo
		    JOIN sealantinfo s on s.ManagementNo = pb.ManagementNo and s.PenetrationNo = pb.PenetrationNo 
		    LEFT JOIN penetrationinspect pi on pi.ManagementNo = pb.ManagementNo and pi.PenetrationNo = pb.PenetrationNo
		         and pi.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pi.PenetrationNo  and pifoo.ManagementNo = pi.ManagementNo)
		    where 1=1 ${cond}
	</select>
	<select id="getCountBySeq" resultType="int" parameterType="hashmap">
		SELECT
			count(*)
		FROM penetrationbaseinfo
		WHERE Seq = '${Seq}'
	</select>
	<update id="insert"  parameterType="hashmap">
		INSERT INTO
		penetrationbaseinfo (
			ManagementNo,
			PenetrationNo ,
			ManagementAreaYN,
			Elevation,
			FirePreventionAreaNo,
			InspectionRoomNo,
			BackRoomNo,
			PenetrationForm,
			Wall_FloorNo,
			FirewallYN,
			WallMeterial,
			WallThickness,
			FrontPicNo,
			BackPicNo,
			ReferenceFloorPlanNo,
			LocationFloorPlanNo,
			SealDetailDWG,
			EL,
			Diameter,
			Height,
			Length,
			PenetrationType,
			MaximumFreeArea,
			MaximumFreeDistance,
			Register,
			Reviewer,
			Checker,
			SpecialNote,
			RegID
			)
		VALUES
		(
			'${ManagementNo}',
			'${PenetrationNo}',
			'${ManagementAreaYN}',
			'${Elevation}',
			'${FirePreventionAreaNo}',
			'${InspectionRoomNo}',
			'${BackRoomNo}',
			'${PenetrationForm}',
			'${Wall_FloorNo}',
			'${FirewallYN}',
			'${WallMeterial}',
			'${WallThickness}',
			'${FrontPicNo}',
			'${BackPicNo}',
			'${ReferenceFloorPlanNo}',
			'${LocationFloorPlanNo}',
			'${SealDetailDWG}',
			'${EL}',
			'${Diameter}',
			'${Height}',
			'${Length}',
			'${PenetrationType}',
			'${MaximumFreeArea}',
			'${MaximumFreeDistance}',
			'${Register}',
			'${Reviewer}',
			'${Checker}',
			'${SpecialNote}',
			'${RegID}'
		)
	</update>
	
	
	<update id="delete"  parameterType="hashmap">
		UPDATE penetrationbaseinfo
		SET 
			UseYN = 'N',
			updateID = '${RegID}'
		WHERE Seq = '${Seq}';
	</update>
	
	<update id="delete_rollBack"  parameterType="hashmap">
		UPDATE penetrationbaseinfo
		SET 
			UseYN = 'Y',
			updateID = '${RegID}'
		WHERE Seq = '${Seq}';
	</update>
	
	
	<select id="LocChart" resultType="hashmap" parameterType="hashmap">
		 select dbo.GetCodeInfoNameByID(LocNo) name , count(*) as value
		 from penetrationbaseinfo
		 group by LocNo
		 order by value desc
	</select>
	
	<select id="WallMeterialChart" resultType="hashmap" parameterType="hashmap">
		 select dbo.GetCodeInfoNameByID(WallMeterial) name , count(*) as value
		 from penetrationbaseinfo
		 group by WallMeterial
		 order by value desc
	</select>
	
	<select id="DepartmentChart" resultType="hashmap" parameterType="hashmap">
		select dbo.GetCodeInfoNameByID(PenetrationDept) name , count(*) as value
		from penetrationbaseinfo p 
		group by PenetrationDept
		order by value desc
	</select>
	
	<select id="ConstructionStateChart" resultType="hashmap" parameterType="hashmap">
		select dbo.GetCodeInfoNameByID(pm.CodeID) name , count(*) as value
		from sealantinfo s
		JOIN penetrationmaterialcodeinfo pm on s.ManagementNo = pm.ManagementNo and s.PenetrationNo = pm.PenetrationNo
			 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
		where pm.CodeGroupID = 'A03'
		group by pm.CodeID
		order by value desc
	</select>
	
	<select id="EffectChart" resultType="hashmap" parameterType="hashmap">
		select 
			( select count(*) from penetrationbaseinfo where VENTILATION_VALUE = '○') as value1 , 
			( select count(*) from penetrationbaseinfo where FIRE_VALUE = '○') as value2,
			( select count(*) from penetrationbaseinfo where RADIATION_VALUE = '○') as value3,
			( select count(*) from penetrationbaseinfo where FLOOD_VALUE = '○') as value4,
			( select count(*) from penetrationbaseinfo where PRESSURE_VALUE = '○') as value5
	</select>
	
	<select id="sealantMaterialChart" resultType="hashmap" parameterType="hashmap">
		select dbo.GetCodeInfoNameByID(CodeID) name , count(*) as value
		from penetrationbaseinfo p
		JOIN penetrationmaterialcodeinfo pm on p.ManagementNo = pm.ManagementNo and p.PenetrationNo = pm.PenetrationNo
		where pm.CodeGroupID = 'A12'
		group by CodeID
		order by value desc
	</select>
	
	
	<select id="EquipNoLocNoData" resultType="hashmap" parameterType="hashmap">
		 select TOP 7
		 	concat(dbo.GetCodeInfoNameByID(EquipNo),'-',dbo.GetCodeInfoNameByID(LocNo)) name , count(*) as value
		 from penetrationbaseinfo
		 group by EquipNo,LocNo
		 order by value desc
		 
	</select>
	
	
	<select id="TotalCount" resultType="hashmap" parameterType="hashmap">
		 select count(*) as value
		 from penetrationbaseinfo
	</select>
	
	<select id="MergeData" resultType="hashmap" parameterType="hashmap">
		 select concat(dbo.GetCodeInfoNameByID(p.EquipNo),'-',dbo.GetCodeInfoNameByID(p.LocNo)) name , count(*) as value ,
		 	( 	select count(*) from penetrationbaseinfo pp
				join sealantinfo ss on  ss.ManagementNo = pp.ManagementNo and ss.PenetrationNo = pp.PenetrationNo
				join penetrationmaterialcodeinfo pm on  pm.ManagementNo = pp.ManagementNo and pm.PenetrationNo = pp.PenetrationNo
					 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pm.CodeID = 'A0301'
			) as val1 , 
			( 	select count(*) from penetrationbaseinfo pp
				join sealantinfo ss on  ss.ManagementNo = pp.ManagementNo and ss.PenetrationNo = pp.PenetrationNo
				join penetrationmaterialcodeinfo pm on  pm.ManagementNo = pp.ManagementNo and pm.PenetrationNo = pp.PenetrationNo
					 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pm.CodeID = 'A0302'
			) as val2 , 
			( 	select count(*) from penetrationbaseinfo pp
				join sealantinfo ss on  ss.ManagementNo = pp.ManagementNo and ss.PenetrationNo = pp.PenetrationNo
				join penetrationmaterialcodeinfo pm on  pm.ManagementNo = pp.ManagementNo and pm.PenetrationNo = pp.PenetrationNo
					 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pm.CodeID = 'A0303'
			) as val3 , 
			( 	select count(*) from penetrationbaseinfo pp
				join sealantinfo ss on  ss.ManagementNo = pp.ManagementNo and ss.PenetrationNo = pp.PenetrationNo
				join penetrationmaterialcodeinfo pm on  pm.ManagementNo = pp.ManagementNo and pm.PenetrationNo = pp.PenetrationNo
					 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pm.CodeID = 'A0304'
			) as val4 , 
			( 	select count(*) from penetrationbaseinfo pp
				join sealantinfo ss on  ss.ManagementNo = pp.ManagementNo and ss.PenetrationNo = pp.PenetrationNo
				join penetrationmaterialcodeinfo pm on  pm.ManagementNo = pp.ManagementNo and pm.PenetrationNo = pp.PenetrationNo
					 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pm.CodeID = 'A0305'
			) as val5 , 
			( 	select count(*) from penetrationbaseinfo pp
				join sealantinfo ss on  ss.ManagementNo = pp.ManagementNo and ss.PenetrationNo = pp.PenetrationNo
				join penetrationmaterialcodeinfo pm on  pm.ManagementNo = pp.ManagementNo and pm.PenetrationNo = pp.PenetrationNo
					 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pm.CodeID = 'A0306'
			) as val6 ,
			( 	select count(*) from penetrationbaseinfo pp 
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and SUBSTRING(pp.PRESSURE_REASON, 1, 1) = '○'
			) as val7 ,
			( 	select count(*) from penetrationbaseinfo pp 
				where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and SUBSTRING(pp.PRESSURE_REASON, 1, 1) != '○'
			) as val8 ,
			( 	select count(*) from penetrationbaseinfo pp 
			    where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pp.VENTILATION_VALUE = '○' 
			) as val9 , 
			( 	select count(*) from penetrationbaseinfo pp 
			    where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pp.FIRE_VALUE = '○' 
			) as val10 , 
			( 	select count(*) from penetrationbaseinfo pp 
			    where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pp.RADIATION_VALUE = '○' 
			) as val11 , 
			( 	select count(*) from penetrationbaseinfo pp 
			    where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pp.FLOOD_VALUE = '○' 
			) as val12 , 
			( 	select count(*) from penetrationbaseinfo pp 
			    where pp.EquipNo = p.EquipNo and pp.LocNo = p.LocNo and pp.PRESSURE_VALUE = '○' 
			) as val13 
			
		 from penetrationbaseinfo p
		 group by p.EquipNo,p.LocNo
		 order by value desc
	</select>
	
	
	<select id="getFrontPicImg" resultType="[B" parameterType="hashmap" >
		 select FrontPicImg as photo
		 from penetrationInspect
		 where ManagementNo = '${ManagementNo}'
			 and PenetrationNo = '${PenetrationNo}'
			 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
	</select>
	<select id="getBackPicImg"  resultType="[B" parameterType="hashmap">
		 select BackPicImg as photo
		 from penetrationInspect pm
		 where ManagementNo = '${ManagementNo}'
			 and PenetrationNo = '${PenetrationNo}'
			 and pm.InspectSeq = (select max(pifoo.inspectSeq) from penetrationinspect pifoo where pifoo.PenetrationNo = pm.PenetrationNo  and pifoo.ManagementNo = pm.ManagementNo)
			 
	</select>
	
	
	<update id="testTran"  parameterType="hashmap">
		 insert into fbulletine(title) values('testTran5');
		 
		 insert into fbulletine(title) values('testTran2'frjisfdj);
	</update>
	
	
	<select id="checkSealMeterial" parameterType="hashmap" resultType="int">
		select count(*)
		from codeinfo
		where GroupID = 'A12'  ${cond}
	</select>
	
	
	<update id="deleteSealMeterial" parameterType="hashmap" >
		delete  penetrationmaterialcodeinfo
		where ManagementNo = '${ManagementNo}'
			 and PenetrationNo = '${PenetrationNo}'
			 and CodeGroupID = 'A12'
	</update>
	
	<insert id="insertSealMeterial" parameterType="hashmap" >
		insert into 
		penetrationmaterialcodeinfo
		(
			ManagementNo,
			PenetrationNo,
			CodeID,
			CodeGroupID
		)
		VALUES(
			'${ManagementNo}',
			'${PenetrationNo}',
			dbo.GetCodeInfoIDByRemark(${SealMeterial}),
			'A12'
		)
	</insert>
	<insert id="insertSealMeterial_his" parameterType="hashmap" >
		insert into 
		penetrationmaterialcodeinfo_his
		(
			status,
			ManagementNo,
			PenetrationNo,
			CodeID,
			CodeGroupID
		)
		VALUES(
			'insert',
			'${ManagementNo}',
			'${PenetrationNo}',
			dbo.GetCodeInfoIDByRemark(${SealMeterial}),
			'A12'
		)
	</insert>
	
</mapper>